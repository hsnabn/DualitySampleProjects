<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TimedActions.core</name>
    </assembly>
    <members>
        <member name="T:TimedActions.TimedActionsCorePlugin">
            <summary>
            Defines a Duality core plugin.
            </summary>
        </member>
        <member name="T:TimedActions.TimedAction">
            <summary>
            The TimedActions abstract class provides the basic infrastructure to
            create time-based triggers.
            </summary>
        </member>
        <member name="M:TimedActions.TimedAction.Action">
            <summary>
            This function is where the actual action that will be executed after
            the time limit is passed is defined.
            This abstract function does not provide any default implementation:
            all derived classes must provide their own.
            </summary>
        </member>
        <member name="M:TimedActions.TimedAction.Run(System.Single)">
            <summary>
            The function to actually run the timed action until it has been completed.
            It is a virtual function: it provides an implementation, but it can be overridden.
            </summary>
            <param name="timeStep">The amount of time that has passed since the last frame, in seconds.
            Can be calculated using Time.TimeMult * Time.SPFMult.</param>
        </member>
        <member name="P:TimedActions.TimedAction.TimeLimit">
            <summary>
            The time limit of the action, in seconds.
            </summary>
        </member>
        <member name="P:TimedActions.TimedAction.Triggers">
            <summary>
            The amount of triggers this action needs to pass to be completed.
            </summary>
        </member>
        <member name="P:TimedActions.TimedAction.Completed">
            <summary>
            Returns whether this action has been completed yet.
            </summary>
        </member>
    </members>
</doc>
